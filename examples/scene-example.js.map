{"version":3,"file":"scene-example.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///../node_modules/gl-matrix/esm/mat2.js","webpack:///../node_modules/gl-matrix/esm/mat2d.js","webpack:///../node_modules/gl-matrix/esm/mat3.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../node_modules/gl-matrix/esm/quat.js","webpack:///../node_modules/gl-matrix/esm/quat2.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///./example.ts","webpack:///./data/mesh.vert","webpack:///./data/scene.frag","webpack:///external umd \"gloperate\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./scene-example.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"gloperate\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"gloperate\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"gloperate\")) : factory(root[\"gloperate\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__4160__) => {\nreturn ","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","\n/* spellchecker: disable */\n\nimport {\n    Canvas,\n    Initializable,\n    LoadingStatus,\n    Renderer,\n    viewer,\n} from 'webgl-operate';\n\n/* spellchecker: enable */\n\n\nexport abstract class Example extends Initializable {\n\n    /**\n     * Hide the loading spinner.\n     */\n    protected showSpinner(): void {\n        const spinnerElement = document.getElementsByClassName('spinner').item(0)!;\n        (spinnerElement as HTMLElement).style.display = 'inline';\n    }\n\n    /**\n     * Hide the loading spinner.\n     */\n    protected hideSpinner(): void {\n        const spinnerElement = document.getElementsByClassName('spinner').item(0)!;\n        (spinnerElement as HTMLElement).style.display = 'none';\n    }\n\n    protected expose(): void {\n\n        (window as any)['canvas'] = this.canvas;\n        (window as any)['context'] = this.canvas.context;\n        (window as any)['controller'] = this.canvas.controller;\n\n        (window as any)['renderer'] = this.renderer;\n    }\n\n    initialize(element: HTMLCanvasElement | string): boolean {\n        const result = this.onInitialize(element);\n\n        this.renderer.loadingStatus$.subscribe((status: LoadingStatus) => {\n            if (status === LoadingStatus.Finished) {\n                this.hideSpinner();\n            } else if (status === LoadingStatus.Started) {\n                this.showSpinner();\n            }\n        });\n\n        this.expose();\n\n        return result;\n    }\n\n    uninitialize(): void {\n        this.onUninitialize();\n    }\n\n    abstract onInitialize(element: HTMLCanvasElement | string): boolean;\n\n    abstract onUninitialize(): void;\n\n    abstract get renderer(): Renderer;\n\n    abstract get canvas(): Canvas;\n\n    enableFullscreenOnCtrlClick(): void {\n\n        const e = this.canvas.element;\n        e.addEventListener('click', (event) => {\n            if (event.ctrlKey) { viewer.Fullscreen.toggle(e); }\n        });\n    }\n}\n","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n    #define texture(sampler, coord) texture2D(sampler, coord)\\n#else\\n    #define varying out\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    attribute vec3 a_vertex;\\n    attribute vec2 a_texCoord;\\n#else\\n    layout(location = 0) in vec3 a_vertex;\\n    layout(location = 1) in vec2 a_texCoord;\\n#endif\\n\\n\\nuniform mat4 u_viewProjection;\\nuniform mat4 u_model;\\n\\n\\nvarying vec4 v_vertex;\\nvarying vec2 v_uv;\\nvarying vec3 v_normal;\\n\\nvoid main()\\n{\\n    v_vertex = u_model * vec4(a_vertex, 1.0);\\n    v_uv = a_texCoord;\\n    v_normal = normalize(a_vertex);\\n\\n    gl_Position = u_viewProjection *  v_vertex;\\n}\\n\"","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n    #define texture(sampler, coord) texture2D(sampler, coord)\\n#else \\n    #define varying in\\n#endif\\n\\n\\n\\nuniform sampler2D u_texture;\\nuniform bool u_textured;\\n\\n\\n#if __VERSION__ == 100\\n    #define fragColor gl_FragColor\\n#else\\n    layout(location = 0) out vec4 fragColor;\\n#endif\\n\\n\\nvarying vec4 v_vertex;\\nvarying vec2 v_uv;\\n\\n\\nvoid main(void)\\n{\\n    if (u_textured) {\\n        fragColor = texture(u_texture, v_uv);\\n    } else {\\n        const float lineWidth = 0.01;\\n        const float lineScale = 3.0;\\n\\n        vec3 remainder = mod(v_vertex.xyz, 1.0 / lineScale);\\n\\n        if (any(lessThan(remainder, vec3(lineWidth)))) {\\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        }\\n        else {\\n            fragColor = vec4(1.0);\\n        }\\n    }\\n}\\n\"","module.exports = __WEBPACK_EXTERNAL_MODULE__4160__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\n/* spellchecker: disable */\n\nimport { mat4, vec3 } from 'gl-matrix';\n\nimport {\n    Camera,\n    Canvas,\n    Context,\n    CuboidGeometry,\n    DefaultFramebuffer,\n    EventProvider,\n    ForwardSceneRenderPass,\n    Framebuffer,\n    GeometryComponent,\n    GeosphereGeometry,\n    Invalidate,\n    Material,\n    Navigation,\n    Program,\n    PlaneGeometry,\n    Renderer,\n    SceneNode,\n    Shader,\n    Texture2D,\n    TransformComponent,\n    Wizard,\n} from 'webgl-operate';\n\nimport { Example } from './example';\n\n/* spellchecker: enable */\n\n\n// tslint:disable:max-classes-per-file\n\n/**\n * @todo comment\n */\nexport class SceneRenderer extends Renderer {\n\n    protected _navigation: Navigation;\n\n    protected _forwardPass: ForwardSceneRenderPass;\n\n    protected _camera: Camera;\n\n    protected _scene: SceneNode;\n\n    protected _texture: Texture2D;\n    protected _framebuffer: Framebuffer;\n    protected _program: Program;\n\n    protected _uViewProjection: WebGLUniformLocation;\n    protected _uModel: WebGLUniformLocation;\n\n    protected _uTexture: WebGLUniformLocation;\n    protected _uTextured: WebGLUniformLocation;\n\n    protected _aMeshVertex: GLint;\n    protected _aMeshTexCoord: GLint;\n\n    /**\n     * Initializes and sets up rendering passes, navigation, loads a font face and links shaders with program.\n     * @param context - valid context to create the object for.\n     * @param identifier - meaningful name for identification of this instance.\n     * @param mouseEventProvider - required for mouse interaction\n     * @returns - whether initialization was successful\n     */\n    protected onInitialize(context: Context, callback: Invalidate,\n        eventProvider: EventProvider): boolean {\n\n        const gl = this._context.gl;\n\n        this._framebuffer = new DefaultFramebuffer(this._context, 'DefaultFBO');\n        this._framebuffer.initialize();\n\n        /* Create mesh rendering program. */\n        const vert = new Shader(this._context, gl.VERTEX_SHADER, 'mesh.vert');\n        vert.initialize(require('./data/mesh.vert'));\n        const frag = new Shader(this._context, gl.FRAGMENT_SHADER, 'scene.frag');\n        frag.initialize(require('./data/scene.frag'));\n\n        this._program = new Program(this._context, 'MeshProgram');\n        this._program.initialize([vert, frag], false);\n\n        this._aMeshVertex = this._program.attribute('a_vertex', 0);\n        this._aMeshTexCoord = this._program.attribute('a_texCoord', 1);\n        this._program.link();\n\n        this._uViewProjection = this._program.uniform('u_viewProjection');\n        this._uModel = this._program.uniform('u_model');\n\n        this._uTexture = this._program.uniform('u_texture');\n        this._uTextured = this._program.uniform('u_textured');\n\n        this._aMeshVertex = this._program.attribute('a_vertex', 0);\n        this._aMeshTexCoord = this._program.attribute('a_texCoord', 1);\n\n        /* Create and configure camera. */\n\n        if (this._camera === undefined) {\n            this._camera = new Camera();\n            this._camera.center = vec3.fromValues(0.0, 0.0, 0.0);\n            this._camera.up = vec3.fromValues(0.0, 1.0, 0.0);\n            this._camera.eye = vec3.fromValues(-0.5, 2.0, 2.0);\n            this._camera.near = 1.0;\n            this._camera.far = 16.0;\n        }\n\n        /* Create and configure navigation */\n\n        this._navigation = new Navigation(callback, eventProvider);\n        this._navigation.camera = this._camera;\n\n        /* Create and configure forward pass. */\n\n        this._forwardPass = new ForwardSceneRenderPass(context);\n        this._forwardPass.initialize();\n\n        this._forwardPass.camera = this._camera;\n        this._forwardPass.target = this._framebuffer;\n\n        /* Create scene. */\n\n        this.generateScene();\n\n        this._forwardPass.scene = this._scene;\n        this._forwardPass.program = this._program;\n        this._forwardPass.updateModelTransform = (matrix: mat4) => {\n            gl.uniformMatrix4fv(this._uModel, false, matrix);\n        };\n        this._forwardPass.updateViewProjectionTransform = (matrix: mat4) => {\n            gl.uniformMatrix4fv(this._uViewProjection, false, matrix);\n        };\n        this._forwardPass.bindMaterial = (material: Material) => {\n            const sceneMaterial = material as SceneExampleMaterial;\n\n            if (sceneMaterial.textured) {\n                sceneMaterial.texture!.bind(gl.TEXTURE0);\n                gl.uniform1i(this._uTexture, 0);\n            }\n\n            gl.uniform1i(this._uTextured, sceneMaterial.textured);\n        }\n\n        return true;\n    }\n\n    /**\n     * Uninitializes Buffers, Textures, and Program.\n     */\n    protected onUninitialize(): void {\n        super.uninitialize();\n\n        // TODO: make sure that all meshes and programs inside of the scene get cleaned\n\n        // this._mesh.uninitialize();\n        // this._meshProgram.uninitialize();\n    }\n\n    protected onDiscarded(): void {\n        this._altered.alter('frameSize');\n        this._altered.alter('canvasSize');\n        this._altered.alter('clearColor');\n    }\n\n    /**\n     * This is invoked in order to check if rendering of a frame is required by means of implementation specific\n     * evaluation (e.g., lazy non continuous rendering). Regardless of the return value a new frame (preparation,\n     * frame, swap) might be invoked anyway, e.g., when update is forced or canvas or context properties have\n     * changed or the renderer was invalidated @see{@link invalidate}.\n     * Updates the navigaten and the AntiAliasingKernel.\n     * @returns whether to redraw\n     */\n    protected onUpdate(): boolean {\n        if (this._altered.frameSize) {\n            this._camera.viewport = [this._frameSize[0], this._frameSize[1]];\n        }\n        if (this._altered.canvasSize) {\n            this._camera.aspect = this._canvasSize[0] / this._canvasSize[1];\n        }\n        if (this._altered.clearColor) {\n            this._forwardPass.clearColor = this._clearColor;\n        }\n\n        this._navigation.update();\n        this._forwardPass.update();\n\n        return this._altered.any || this._camera.altered;\n    }\n\n    /**\n     * This is invoked in order to prepare rendering of one or more frames, regarding multi-frame rendering and\n     * camera-updates.\n     */\n    protected onPrepare(): void {\n        this._forwardPass.prepare();\n\n        this._altered.reset();\n        this._camera.altered = false;\n    }\n\n    /**\n     * @todo comment\n     * @param frameNumber - for intermediate frames in accumulation rendering.\n     */\n    protected onFrame(frameNumber: number): void {\n        if (this.isLoading) {\n            return;\n        }\n\n        this._forwardPass.frame();\n    }\n\n    /**\n     * @todo comment ...\n     */\n    protected onSwap(): void {\n    }\n\n\n    /**\n     *  @todo comment\n     */\n    protected generateScene(): void {\n        this._scene = new SceneNode('root');\n\n        this.generateSphereNode(this._scene);\n        this.generatePlaneNode(this._scene);\n        this.generateBoxNode(this._scene);\n    }\n\n    protected generateSphereNode(parent: SceneNode): SceneNode {\n        const gl = this._context.gl;\n\n        /* Create node and transform */\n        const node = parent.addNode(new SceneNode('sphere'));\n        const translate = mat4.fromTranslation(mat4.create(), vec3.fromValues(-0.5, 0.0, 0.0));\n        const scale = mat4.fromScaling(mat4.create(), vec3.fromValues(0.3, 0.3, 0.3));\n        const transformMatrix = mat4.multiply(mat4.create(), translate, scale);\n\n        const transform = new TransformComponent(transformMatrix);\n        node.addComponent(transform);\n\n        /* Create and load texture. */\n        const texture = new Texture2D(this._context, 'Texture');\n        texture.initialize(1, 1, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE);\n        texture.fetch('/examples/data/concrete_floor_02_diff_1k.webp').then(() => {\n            this.finishLoading();\n            this.invalidate(true);\n        });\n\n        /* Create material */\n        const material = new SceneExampleMaterial(this._context, 'ExampleMaterial1');\n        material.texture = texture;\n        material.textured = true;\n\n        /* Create geometry. */\n        const geometry = new GeosphereGeometry(\n            this._context,\n            'mesh',\n            1.0,\n            true);\n\n        geometry.initialize(this._aMeshVertex, this._aMeshTexCoord);\n\n        const sphere = new GeometryComponent();\n        sphere.geometry = geometry;\n        sphere.material = material;\n\n        node.addComponent(sphere);\n\n        return node;\n    }\n\n    protected generatePlaneNode(parent: SceneNode): SceneNode {\n        /* Create node and transform */\n        const node = parent.addNode(new SceneNode('plane'));\n        const translate = mat4.fromTranslation(mat4.create(), vec3.fromValues(0.0, -0.4, 0.0));\n        const scale = mat4.fromScaling(mat4.create(), vec3.fromValues(20.0, 1.0, 20.0));\n        const transformMatrix = mat4.multiply(mat4.create(), translate, scale);\n\n        const transform = new TransformComponent(transformMatrix);\n        node.addComponent(transform);\n\n        /* Create material */\n        const material = new SceneExampleMaterial(this._context, 'ExampleMaterial2');\n        material.textured = false;\n\n        /* Create geometry. */\n        const geometry = new PlaneGeometry(this._context);\n        geometry.initialize(this._aMeshVertex);\n\n        const sphere = new GeometryComponent();\n        sphere.geometry = geometry;\n        sphere.material = material;\n\n        node.addComponent(sphere);\n\n        return node;\n    }\n\n    protected generateBoxNode(parent: SceneNode): SceneNode {\n        const gl = this._context.gl;\n\n        /* Create node and transform */\n        const node = parent.addNode(new SceneNode('box'));\n        const translate = mat4.fromTranslation(mat4.create(), vec3.fromValues(0.5, 0.0, 0.0));\n        const scale = mat4.fromScaling(mat4.create(), vec3.fromValues(0.5, 0.5, 0.5));\n        const transformMatrix = mat4.multiply(mat4.create(), translate, scale);\n\n        const transform = new TransformComponent(transformMatrix);\n        node.addComponent(transform);\n\n        /* Create and load texture. */\n        const texture = new Texture2D(this._context, 'Texture');\n        texture.initialize(1, 1, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE);\n        texture.fetch('/examples/data/blue-painted-planks-diff-1k-modified.webp').then(() => {\n            this.invalidate(true);\n        });\n\n        /* Create material */\n        const material = new SceneExampleMaterial(this._context, 'ExampleMaterial3');\n        material.texture = texture;\n        material.textured = true;\n\n        /* Create geometry. */\n        const geometry = new CuboidGeometry(this._context, 'mesh', true);\n\n        geometry.initialize(this._aMeshVertex, this._aMeshTexCoord);\n\n        const box = new GeometryComponent();\n        box.geometry = geometry;\n        box.material = material;\n\n        node.addComponent(box);\n\n        return node;\n    }\n}\n\nexport class SceneExampleMaterial extends Material {\n\n    protected _texture: Texture2D;\n    protected _textured: boolean;\n\n    set texture(texture: Texture2D) {\n        this._texture = texture;\n    }\n\n    get texture(): Texture2D {\n        return this._texture;\n    }\n\n    set textured(value: boolean) {\n        this._textured = value;\n    }\n\n    get textured(): boolean {\n        return this._textured;\n    }\n}\n\nexport class SceneExample extends Example {\n\n    private _canvas: Canvas;\n    private _renderer: SceneRenderer;\n\n    onInitialize(element: HTMLCanvasElement | string): boolean {\n\n        this._canvas = new Canvas(element, { antialias: false });\n        this._canvas.controller.multiFrameNumber = 1;\n        this._canvas.framePrecision = Wizard.Precision.byte;\n        this._canvas.frameScale = [1.0, 1.0];\n\n        this._canvas.clearColor.fromHex('ffffff');\n\n        this._renderer = new SceneRenderer();\n        this._canvas.renderer = this._renderer;\n\n        return true;\n    }\n\n    onUninitialize(): void {\n        this._canvas.dispose();\n        (this._renderer as Renderer).uninitialize();\n    }\n\n    get canvas(): Canvas {\n        return this._canvas;\n    }\n\n    get renderer(): SceneRenderer {\n        return this._renderer;\n    }\n\n}\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__4160__","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","equals","b","abs","max","create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","hypot","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","y","arguments","length","sqrt","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","vec","div","dist","sqrDist","sqrLen","forEach","stride","offset","count","fn","arg","l","dot","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","setAxes","view","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","Example","Initializable","showSpinner","document","getElementsByClassName","item","style","display","hideSpinner","expose","window","this","canvas","context","controller","renderer","initialize","element","result","onInitialize","loadingStatus$","subscribe","status","LoadingStatus","Finished","Started","uninitialize","onUninitialize","enableFullscreenOnCtrlClick","e","addEventListener","event","ctrlKey","viewer","Fullscreen","toggle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","definition","key","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","SceneRenderer","Renderer","callback","eventProvider","gl","_context","_framebuffer","DefaultFramebuffer","vert","Shader","VERTEX_SHADER","frag","FRAGMENT_SHADER","_program","Program","_aMeshVertex","attribute","_aMeshTexCoord","link","_uViewProjection","uniform","_uModel","_uTexture","_uTextured","_camera","Camera","vec3","_navigation","Navigation","camera","_forwardPass","ForwardSceneRenderPass","generateScene","scene","_scene","program","updateModelTransform","matrix","uniformMatrix4fv","updateViewProjectionTransform","bindMaterial","material","sceneMaterial","textured","texture","bind","TEXTURE0","uniform1i","super","onDiscarded","_altered","alter","onUpdate","frameSize","viewport","_frameSize","canvasSize","_canvasSize","clearColor","_clearColor","update","any","altered","onPrepare","prepare","reset","onFrame","frameNumber","isLoading","frame","onSwap","SceneNode","generateSphereNode","generatePlaneNode","generateBoxNode","parent","node","addNode","mat4","transformMatrix","transform","TransformComponent","addComponent","Texture2D","RGB","UNSIGNED_BYTE","fetch","then","finishLoading","invalidate","SceneExampleMaterial","geometry","GeosphereGeometry","sphere","GeometryComponent","PlaneGeometry","CuboidGeometry","box","Material","_texture","_textured","SceneExample","_canvas","Canvas","antialias","multiFrameNumber","framePrecision","Wizard","Precision","byte","frameScale","fromHex","_renderer","dispose"],"sourceRoot":""}